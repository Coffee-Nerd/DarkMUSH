<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="DarkMUSH_ASCII_Mapper"
   author="Asmodeus"
   id="9c0ed228bdb4a71c77e85ce2"
   language="Lua"
   purpose="Displays the Ascii Map"
   date_written="2024-03-27"
   requires="4.00"
   version="2.0"
   save_state="y"
   >

</plugin>
<aliases>
<alias
    sequence="100"
    match="set ascii font"
    enabled="y"
    send_to="12"
    ignore_case="y">
    <send>
local wanted_font = utils.fontpicker(body_font_name, body_font_size) --font dialog
if wanted_font then
    body_font_name = wanted_font.name
    body_font_size = wanted_font.size
    SetVariable("body_font_size", body_font_size)
    SetVariable("body_font_name", body_font_name)
    
    -- Just update the font settings without recreating
    if my_window and my_window.set_font then
        my_window:set_font({
            body_font_name = body_font_name,
            body_font_size = body_font_size
        })
        my_window:draw()
    end
    
    util.print("$RSetting the font to ".. body_font_name .." with a size of ".. body_font_size)
    SaveState()
else
    util.print("$RFont selection cancelled.")
end
</send>
</alias>
<alias
    sequence="100"
    match="ascii help"
    enabled="y"
    send_to="12"
    ignore_case="y"><send>
     util.print("$RA help page will go here eventually.")
</send></alias>
<alias
    sequence="100"
    match="ascii fit"
    enabled="y"
    send_to="12"
    ignore_case="y">
    <send>
        my_window:fit_contents()
        my_window:draw()
        util.print("$RFitted ASCII map window to content size.")
    </send>
</alias>
</aliases>
<!-- Triggers removed - using GMCP system -->
<!--  Script  -->
<script>

require "themed_miniwindows"
require "gmcphelper"
require "tprint"
require "utility"
require "colors"
require "serialize"
dofile(GetPluginInfo(GetPluginID(), 20) .. "darkwiz_colors.lua")

win_width = GetVariable("win_width") or 200
win_height = GetVariable("win_height") or 200
body_font_name = GetVariable("body_font_name") or "Lucida Console"
body_font_size = tonumber(GetVariable("body_font_size")) or 10
font_id = "font"
version = "2.0"
my_window = ThemedTextWindow(
    "testwindow2",                    -- string, required, a unique identifier for this window
    0,                                 -- integer, required, where to put it if the player hasn't moved it
    0,                                 -- integer, required, where to put it if the player hasn't moved it
    win_width,                         -- integer, required, how big to make it if the player hasn't moved it -- width
    win_height,                        -- integer, required, how big to make it if the player hasn't moved it  -- height
    "$x009DA$x202RK$x208MU$x214S$x220H$x011 AS$x190CI$x154I M$x118AP$x082PE$x047R $Gv ".. version,  -- string, optional (nil means no titlebar), text to put into the title
    "center",                          -- string, optional (default is "center"), "left", "center", or "right"
    true,                              -- boolean, optional (default is false), true adds a close button in the top left
    true,                              -- boolean, optional (default is false), make the window resizeable
    false,                             -- boolean, optional (default is false), add a scrollbar and mousewheel scrolling
    false,                             -- boolean, optional (default is false), make the text selectable
    false,                             -- boolean, optional (default is false), make the text copyable via right-click
    false,                             -- boolean, optional (default is false), turn detected URLs into clickable links
    false,                             -- boolean, optional (default is false), automatically wrap text lines that are too wide
    body_font_name,                    -- string, optional (default is Dina), override the title font name
    12,                                -- integer, optional (default is 10), override the title font size
    body_font_name,                    -- string, optional (default is Dina), override the body text font name
    body_font_size,                    -- integer, optional (default is 10), override the body text font size
    100,                               -- integer, optional (default is 1000), maximum number of text lines to keep
    5,                                 -- integer, optional (default is 5 pixels), space between text and miniwindow frame
    false,                             -- boolean, optional (default is false), true will prevent the window from appearing until you call :show() on it
    false                              -- boolean, optional (default is false), if true, pixels the same color as Theme.PRIMARY_BODY will be transparent
)

-- Handle GMCP for room.map
function OnPluginBroadcast(msg, id, name, text)
    if (id == '3e7dedbe37e44942dd46d264') then
        if (text == "room.map") then   
            local gmcp_map = gmcp("room.map")
            if gmcp_map and gmcp_map.map then
                my_window:clear()
                
                -- Split the map text into lines
                local lines = {}
                for line in gmcp_map.map:gmatch("[^\r\n]+") do
                    table.insert(lines, line)
                end
                
                -- Build the complete map text with proper line breaks
                local full_map_text = ""
                for k, v in ipairs(lines) do
                    full_map_text = full_map_text .. v
                    if k &lt; #lines then
                        full_map_text = full_map_text .. "\n"
                    end
                end
                
                -- Add all the text at once
                my_window:add_text(full_map_text, true)
                
                -- Don't resize - just draw at current size
                my_window:draw()
            end
        end
    end
end

</script>

</muclient>