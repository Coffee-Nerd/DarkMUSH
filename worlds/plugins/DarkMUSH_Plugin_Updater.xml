<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="DarkMUSH_Plugin_Updater"
   author="Asmodeus and Hadar"
   id="15bf0c926513966c26478da0"
   language="Lua"
   purpose="Manage and maintain multiple scripts from GitHub"
   save_state="y"
   date_written="2022-10-24 00:00:00"
   requires="4.00"
   version="3.00"
   >

</plugin>

<include name="constants.lua"/>

<aliases>
     <alias
     script="pmMain"
     match="^pru ?(.*)?$"
     enabled="y"
     regexp="y"
     sequence="100"
     >
     </alias>
     <alias
     script="updatePlugin"
     match="^updatePlugin ([0-9a-zA-Z]+)$"
     enabled="y"
     regexp="y"
     sequence="100"
     >
     </alias>
     <alias
     script="reloadPlugin"
     match="^reloadPlugin ([0-9a-zA-Z]+)$"
     enabled="y"
     regexp="y"
     sequence="100"
     >
     </alias>
     <alias
     script="removePlugin"
     match="^removePlugin ([0-9a-zA-Z]+)$"
     enabled="y"
     regexp="y"
     sequence="100"
     >
     </alias>
     <alias
     script="installPlugin"
     match="^installPlugin ([0-9a-zA-Z]+)$"
     enabled="y"
     regexp="y"
     sequence="100"
     >
     </alias>
     <alias match="^pru help$"
	enabled="y"
	sequence="100"
	send_to="12"
	regexp="y"
	keep_evaluating="y"
	>
	<send>
		PruHelp()
	</send>
     </alias>
</aliases>

<script>
<![CDATA[
require "serialize"
require "tprint"
local json = require("json")
dofile(GetInfo(60) .. "darkwiz_plugin_colors.lua")

local gitHubRaw = "https://raw.githubusercontent.com/Coffee-Nerd/DarkMUSH-Updater/main/github.list"
local rawPluginUrl
pluginlinelength = 0
paddedpluginlinelength = 0
  

function utilprint(str, messageType)

	if messageType == "error" then
          AnsiNote(ColoursToANSI("@x238[@RDE@x202MO@x208N P@x214LU@x220G@x228IN @x220MA@x214NA@x208G@x202E@RR@x238]@W:@w"..str))
     elseif messageType == "script" then
          AnsiNote(ColoursToANSI("@x238@x238[@RDE@x202MO@x208N P@x214LU@x220G@x228IN @x220MA@x214NA@x208G@x202E@RR@x238]@c "..str))
     else
		AnsiNote(ColoursToANSI(str))
	end
	
end

function OnPluginSaveState ()
	SetVariable ("hpmVar", "hpmVar = " .. serialize.save_simple (hpmVar))
	SetVariable ("hpmpastfirstinstall2", "true")
end -- function OnPluginSaveState


function OnPluginInstall ()
     PLUGIN_VERSION  = GetPluginInfo(GetPluginID(), 19)
     PLUGIN_NAME   = GetPluginInfo(GetPluginID(), 1)
   	if GetVariable ("enabled") == "false" then
		ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
		check (EnablePlugin(GetPluginID (), false))
		return
	end 
	
	utilprint("Use pru help for help regarding the updater - this notification will look better in the future","script")
  
	OnPluginEnable ()
end

function OnPluginEnable ()
     hpmVar = {}
     hpmVar["cache"] = {}
     ghName = nil
     if GetVariable ("hpmpastfirstinstall2") == "true" then
		assert (loadstring (GetVariable ("hpmVar") or "")) ()
	end
     makeRawUrl()
     buildCache()    
end

function OnPluginListChanged()
    SaveState()
 end

function string.explode(str, separator, plain)
    assert(type(separator) == "string" and separator ~= "", "Invalid separator (need string of length >= 1)") -- Check if the separator is valid

    local result = {}  -- Table to hold the segments
    local nextIndex = 1  -- The next index where we will insert
    local currentPosition = 1  -- Starting position for each search

    while true do
        local start, stop = str:find(separator, currentPosition, plain)         -- Find the next instance of separator
        
        if not start then break end         -- If no more separators, then break

        if currentPosition ~= start then         -- If there are characters before the separator, add them to result
            result[nextIndex] = str:sub(currentPosition, start - 1)
            nextIndex = nextIndex + 1
        end

        currentPosition = stop + 1         -- Move the current position past this instance of separator
    end

    result[nextIndex] = str:sub(currentPosition)     -- Add the last segment of the string to the result

    return result
end


function onSendActionComplete(success,data)
     if success then
          ghName = data
     else
          return
     end
end

function pmMain(l, m, wc)
     local first, rest = wc[1]:match("(%w+)%s*(.*)")
     
     if first == nil then
          PruHelp()
          return
     end
     
     if first == "check" then
          pmList()
     elseif first == "update" then
          updatePluginThis()
     elseif first == "help" then
          PruHelp()
     end
     
end
    
-- Global variables
build_Len = 0
build_res = 0

function pmList()
    makeRawUrl()
    buildCache()

    build_Len = getPluginCount(rawPluginUrl)
    build_res = 0

   -- utilprint("@x238+---------------------[...]")
    for pluginName, fileUrls in pairs(rawPluginUrl) do
        if type(fileUrls) == "table" and #fileUrls > 0 then
            -- Find the main XML file (first .xml file in the list)
            local mainXmlUrl = nil
            for _, url in ipairs(fileUrls) do
                if url:match("%.xml$") then
                    mainXmlUrl = url
                    break
                end
            end
            
            if mainXmlUrl then
                async_ok, async = pcall(require, "async")
                ghName = async.doAsyncRemoteRequest(mainXmlUrl, buildOutput, "HTTPS")
            end
        end
    end
end

function getPluginCount(pluginTable)
    local count = 0
    for pluginName, fileUrls in pairs(pluginTable) do
        if type(fileUrls) == "table" and #fileUrls > 0 then
            count = count + 1
        end
    end
    return count
end

function buildOutput(retval, page, status, headers, full_status, request_url)
    local pluginId, ghName

    if status == 200 then
        ghName = getName(page, true)
        pluginId = string.match(page, '%s+id="(%w+)"')
    else
        print(request_url)
        utilprint("Cant connect to github", "error")
        return
    end

    build_res = build_res + 1

    renderPluginInfo(build_res, build_Len, ghName, pluginId)

end

-- Create colored hyperlink
function createColoredHyperlink(action, colorString, hint)
    local styles = ColoursToStyles(colorString)  -- Convert Aardwolf color codes to MUSHclient style runs
    
    for _, v in pairs(styles) do                 -- Loop through the styles to create the hyperlink
        local styleToUse = v.bold and 1 or 0     -- Check if 'bold' exists and set style accordingly
        NoteStyle(styleToUse)

        if v.text and v.textcolour then          -- Check all required fields
            local backcolour = 0                 -- Since 'backcolour' is missing, we'll use a default (let's say black: 0)
            
            Hyperlink(
                action,                          -- What happens when you click the link
                v.text,                          -- Displayed text
                hint,                            -- What displays when you hover over the link
                RGBColourToName(v.textcolour),   -- Foreground color
                RGBColourToName(backcolour),     -- Background color (default to black)
                0,
                true
            )
        else
            Note("One of the necessary fields (text, textcolour, backcolour) is missing in the styles table")
        end
    end
end

function simple_utf8_char(code)
    if code < 128 then
        return string.char(code)
    elseif code < 2048 then
        return string.char(192 + math.floor(code / 64), 128 + code % 64)
    elseif code < 65536 then
        return string.char(224 + math.floor(code / 4096), 128 + math.floor(code % 4096 / 64), 128 + code % 64)
    else
       return string.char(240 + math.floor(code / 262144), 128 + math.floor(code % 262144 / 4096), 128 + math.floor(code % 4096 / 64), 128 + code % 64)
    end
end


function displayUnicode(code_point)
    return simple_utf8_char(tonumber(code_point, 16))
end

function unicodeprint(string)
    string = string:gsub("#(%x+)", function(hex)
        return displayUnicode(hex)
    end)
    Simulate(ColoursToANSI(string))
end
function printHorizontalLine(length)
    local line = displayUnicode("2500"):rep(length)
    unicodeprint("@x238│" .. line .. "│")
end

-- Function to print a separator
function printSeparator(length)
    unicodeprint("@x238├" .. displayUnicode("2500"):rep(length - 2) .. "┤\n")
end
-- Default foreground color
local defaultForegroundColor = "238"

function TellUnicodeColours(color_coded_str)
    -- Replace Unicode code points first
    local stringWithUnicode = color_coded_str:gsub("#(%x+)", function(hex)
        return displayUnicode(hex)
    end)

    -- Prepend the default foreground color to the string
    stringWithUnicode = "@x" .. defaultForegroundColor .. stringWithUnicode

    -- Convert Aardwolf color codes to style objects
    local styles = ColoursToStyles(stringWithUnicode, "w", nil)

    -- Loop through the styles and apply them with ColourTell
    for _, style in ipairs(styles) do
        ColourTell(
            RGBColourToName(style.textcolour),
            RGBColourToName(style.backcolour or 0),  -- assuming black background if not specified
            style.text
        )
    end
end


function renderPluginInfo(build_res, build_Len, ghName, pluginId)
    if build_res == 1 then
        unicodeprint("@x238┌" .. displayUnicode("2500"):rep(90) .. "┐")
    else
        printSeparator(92)
    end
    TellUnicodeColours("│ @x238[@R" .. build_res .. "@x238] @x208" .. ghName .. " ")
    pluginlinelength = #ghName + 6
    if IsPluginInstalled(hpmVar["cache"][pluginId]["pluginId"]) then
        local localVersion = tonumber(hpmVar["cache"][pluginId]["localVersion"]) or 0
        local webVersion = tonumber(hpmVar["cache"][pluginId]["webVersion"]) or 0
        if localVersion < webVersion then
            needUpdate = true
            pluginlinelength = pluginlinelength + #tostring(localVersion) + 4 + #tostring(webVersion) + 8 + 10 -- This is for "[Update] "
            elseif localVersion >= webVersion then
            needUpdate = false
            pluginlinelength = pluginlinelength + 9 -- This is for "[Latest] "
        end
      pluginlinelength = pluginlinelength + 9 -- This is for "[Reload] "
      pluginlinelength = pluginlinelength + 9 -- This is for "[Remove] "
      paddedpluginlinelength = string.rep(" ", 90 - pluginlinelength)
      TellUnicodeColours("" .. paddedpluginlinelength .. "")
      if needUpdate then 
        createColoredHyperlink("updatePlugin " .. pluginId, "@x238[@x196U@x202p@x208d@x214a@x220t@x226e @x190P@x154l@x118u@x082g@x047i@x048n@x238]", "Download and Update Plugin")
        TellUnicodeColours(" @x238 (@w" .. hpmVar["cache"][pluginId]["localVersion"] .. "@Y->@G"..webVersion.."@x238) ")
      else 
        TellUnicodeColours("@x238(@x041La@x035te@x029s@x023t@x238) ")
      end
        
      createColoredHyperlink("reloadPlugin " .. pluginId, "@x238[@YR@x220e@x214lo@x220a@Yd@x238] ", "Reload plugin") 
      createColoredHyperlink("removePlugin " .. pluginId, "@x238[@RRemove@x238] ", "Remove plugin")
      TellUnicodeColours("@x238│")
    else
        pluginlinelength = pluginlinelength + 10 -- This is for "[Install] "
        paddedpluginlinelength = string.rep(" ", 80 - pluginlinelength)
        TellUnicodeColours("" .. paddedpluginlinelength .. "")
        createColoredHyperlink("installPlugin " .. pluginId, "@x208[Install] ", "Install plugin")
        TellUnicodeColours("@x238│")
    end    
  --  TellUnicodeColours("[@YVersion @R" .. hpmVar["cache"][pluginId]["localVersion"] .. "@x238] │")
    print("")
    local purpose = hpmVar["cache"][pluginId]["purpose"]
    local paddedPurpose = purpose .. string.rep(" ", 87 - #purpose)
    TellUnicodeColours("│  @x073" .. paddedPurpose .. " @x238│")
    print("")
    if build_res == build_Len then
        unicodeprint("@x238└" .. displayUnicode("2500"):rep(90) .. "┘@w")
    end
end



function getName(Data, p)
    local name
    if p then
        name = string.upper(string.gsub(string.match(Data, '%s+name="DarkMUSH?_([%w_]+)"'), "_", " "))
    else
        name = string.match(Data, '%s+name="DarkMUSH?_([%w_]+)"')
    end
    return name
end

function loadVariables(wc)
    local script_id = wc[1]
    -- Check if the cache entry exists
    if hpmVar["cache"][script_id] then
        local script_name = hpmVar["cache"][script_id]["localName"]
        local script_url = hpmVar["cache"][script_id]["url"]
        local script_pid = hpmVar["cache"][script_id]["pluginId"]

        return script_id, script_name, script_url, script_pid
    else
        print("Error: Cache entry for script_id not found.")
        return nil
    end
end

function handleAsyncRequest(script_url, script_name)
    local async_ok, async = pcall(require, "async")
    if async_ok then
        local script_rawurl = async.request(script_url, "HTTPS")
        local retval, page, status, headers, full_status = script_rawurl:join()

        if status == 200 then
            local lscript = io.open(script_name, "w")
            lscript:write(page)
            lscript:close()
        end
        return status
    end
    return nil
end

function updateAllPluginFiles(script_id)
    local cache_entry = hpmVar["cache"][script_id]
    if not cache_entry then
        utilprint("No cache entry found for plugin ID: " .. script_id, "error")
        return false
    end
    
    if not cache_entry.allFiles then
        utilprint("No file list found for plugin: " .. (cache_entry.shortName or script_id), "error")
        utilprint("Cache entry exists but allFiles is missing", "error")
        -- Fallback: try to update just the main XML file
        if cache_entry.url then
            local status = handleAsyncRequest(cache_entry.url, cache_entry.localName)
            return status == 200
        end
        return false
    end
    
    local script_directory = GetInfo(60)
    local success_count = 0
    local total_files = #cache_entry.allFiles
    
    utilprint("Updating " .. total_files .. " files for " .. (cache_entry.shortName or script_id), "script")
    
    for _, fileUrl in ipairs(cache_entry.allFiles) do
        local fileName = fileUrl:match("/([^/]+)$")
        local localPath
        
        if fileName:match("%.xml$") then
            localPath = script_directory .. fileName
        elseif fileName:match("%.lua$") then
            local lua_directory = script_directory .. "../lua/"
            os.execute("mkdir -p \"" .. lua_directory .. "\"")
            localPath = lua_directory .. fileName
        elseif fileName:match("%.(bmp|png|jpg|jpeg|gif)$") then
            local images_directory = script_directory .. "images/"
            os.execute("mkdir -p \"" .. images_directory .. "\"")
            localPath = images_directory .. fileName
        else
            local misc_directory = script_directory .. "misc/"
            os.execute("mkdir -p \"" .. misc_directory .. "\"")
            localPath = misc_directory .. fileName
        end
        
        local status = handleAsyncRequest(fileUrl, localPath)
        if status == 200 then
            success_count = success_count + 1
            utilprint("Downloaded: " .. fileName, "script")
        else
            utilprint("Failed to download: " .. fileName, "error")
        end
    end
    
    utilprint("Downloaded " .. success_count .. "/" .. total_files .. " files", "script")
    return success_count == total_files
end

function updatePlugin(name, line, wc)
    local script_id, script_name, script_url, script_pid = loadVariables(wc)
    utilprint("Updating Plugin @G" .. hpmVar["cache"][script_id]["shortName"] .. "@w", "script")
    UnloadPlugin(script_pid)
    
    local success = updateAllPluginFiles(script_id)
    if success then
        utilprint("Plugin @G" .. hpmVar["cache"][script_id]["shortName"] .. "@c Updated Enjoy!", "script")
        LoadPlugin(script_name)
    else
        utilprint("Plugin update failed for @R" .. hpmVar["cache"][script_id]["shortName"], "error")
    end
end

function installPlugin(name, line, wc)
    local script_id, script_name, script_url, script_pid = loadVariables(wc)
    utilprint("@x238Installing Plugin @Y" .. hpmVar["cache"][script_id]["shortName"] .. "@w", "script")
    
    local success = updateAllPluginFiles(script_id)
    if success then
        utilprint("@x238Plugin @Y" .. hpmVar["cache"][script_id]["shortName"] .. "@x238 Installed... Enjoy!", "script")
        LoadPlugin(script_name)
    else
        utilprint("Plugin installation failed for @R" .. hpmVar["cache"][script_id]["shortName"], "error")
    end
end
function reloadPlugin(name, line, wc)
    local script_id, script_name, script_url, script_pid = loadVariables(wc)
    utilprint("@x238Currently reloading script: @Y" .. hpmVar["cache"][script_id]["shortName"] .. "@x238 please stand by", "script")
    ReloadPlugin(script_pid)
end

function removePlugin(name, line, wc)
    local script_id, script_name, script_url, script_pid = loadVariables(wc)
    utilprint("Currently Removing script: " .. hpmVar["cache"][script_id]["shortName"] .. "@x238 please stand by")
    UnloadPlugin(script_pid)
    local ok, err = os.remove(script_name)
    if ok then
        utilprint("@RRemoved@x238 script: @Y" .. hpmVar["cache"][script_id]["shortName"] .. "@w", "script")
    else
        utilprint("Was not able to remove @Y" .. hpmVar["cache"][script_id]["shortName"] .. " @R" .. err .. "@w", "error")
    end
end

function makeRawUrl()
     async_ok, async = pcall (require, "async")
     if async_ok then
          makeRawURL = async.request(gitHubRaw, "HTTPS")
          retval, page, status, headers, full_status = makeRawURL:join()
          
          if status == 200 then
               rawPluginUrl = parsePluginList(page)
          end--end 200
     end --end async_ok
     return rawPluginUrl
end

function parsePluginList(content)
    local lines = string.explode(content, "\n")
    local plugins = {}
    local currentPlugin = nil
    local currentFiles = {}
    
    for _, line in ipairs(lines) do
        line = line:match("^%s*(.-)%s*$") -- trim whitespace
        
        if line:match("^%[PLUGIN:(.+)%]$") then
            -- Start of new plugin
            if currentPlugin then
                -- Save previous plugin
                plugins[currentPlugin] = currentFiles
            end
            currentPlugin = line:match("^%[PLUGIN:(.+)%]$")
            currentFiles = {}
        elseif line == "[END]" then
            -- End of current plugin
            if currentPlugin then
                plugins[currentPlugin] = currentFiles
                currentPlugin = nil
                currentFiles = {}
            end
        elseif line:match("^%[DIR:(.+)%]$") then
            -- Directory reference
            if currentPlugin then
                local dirPath = line:match("^%[DIR:(.+)%]$")
                local dirFiles = fetchDirectoryFiles(dirPath)
                for _, fileUrl in ipairs(dirFiles) do
                    table.insert(currentFiles, fileUrl)
                end
            end
        elseif line ~= "" and not line:match("^%[") then
            -- This is a file URL
            if currentPlugin then
                table.insert(currentFiles, line)
            else
                -- Legacy format - single URL without plugin grouping
                -- Extract plugin name from URL for backward compatibility
                local pluginName = line:match("/([^/]+)%.xml$")
                if pluginName then
                    plugins[pluginName] = {line}
                end
            end
        end
    end
    
    -- Handle case where file ends without [END]
    if currentPlugin then
        plugins[currentPlugin] = currentFiles
    end
    
    return plugins
end

function fetchDirectoryFiles(dirPath)
    local async_ok, async = pcall(require, "async")
    if not async_ok then
        utilprint("Async module not available for directory fetching", "error")
        return {}
    end
    
    -- Convert directory path to GitHub API URL
    -- Expected format: "Coffee-Nerd/DarkMUSH/main/worlds/plugins/images"
    local repo, branch, path = dirPath:match("([^/]+/[^/]+)/([^/]+)/(.+)")
    if not repo or not branch or not path then
        utilprint("Invalid directory path format: " .. dirPath, "error")
        return {}
    end
    
    local apiUrl = "https://api.github.com/repos/" .. repo .. "/contents/" .. path .. "?ref=" .. branch
    local request = async.request(apiUrl, "HTTPS")
    local retval, page, status, headers, full_status = request:join()
    
    if status ~= 200 then
        utilprint("Failed to fetch directory: " .. dirPath .. " (Status: " .. status .. ")", "error")
        return {}
    end
    
    local json = require("json")
    local success, dirContents = pcall(json.decode, page)
    if not success then
        utilprint("Failed to parse directory JSON for: " .. dirPath, "error")
        return {}
    end
    
    local fileUrls = {}
    for _, item in ipairs(dirContents) do
        if item.type == "file" and item.download_url then
            table.insert(fileUrls, item.download_url)
        end
    end
    
    utilprint("Found " .. #fileUrls .. " files in directory: " .. dirPath, "script")
    return fileUrls
end

function raw_get(retval, page, status, headers, full_status, request_url)
     if status == 200 then
          print(page)
     end
end

function tablelength(T)
  local count = 0
  for i,v in pairs(T) do 
     if type(v) == "table" and #v > 0 then
          count = count + 1
     elseif type(v) == "string" and v ~= "" then
          count = count + 1
     end
  end
  return count
end

function buildCache()
    cache_Len = getPluginCount(rawPluginUrl)
    cache_res = 0
    
    -- Store plugin file mappings for later use in cache building
    if not hpmVar then hpmVar = {} end
    if not hpmVar["pluginFiles"] then hpmVar["pluginFiles"] = {} end
    
    for pluginName, fileUrls in pairs(rawPluginUrl) do
        if type(fileUrls) == "table" and #fileUrls > 0 then
            -- Find the main XML file for cache building
            local mainXmlUrl = nil
            for _, url in ipairs(fileUrls) do
                if url:match("%.xml$") then
                    mainXmlUrl = url
                    break
                end
            end
            
            if mainXmlUrl then
                -- Store the file list mapped by the main XML URL
                hpmVar["pluginFiles"][mainXmlUrl] = fileUrls
            end
        end
    end
    
    local async_ok, async = pcall(require, "async")
    if async_ok then
        if rawPluginUrl == nil then
            utilprint("Please make sure the URL is properly filled out", "error")
            return
        end
        
        for pluginName, fileUrls in pairs(rawPluginUrl) do
            if type(fileUrls) == "table" and #fileUrls > 0 then
                -- Find the main XML file for cache building
                local mainXmlUrl = nil
                for _, url in ipairs(fileUrls) do
                    if url:match("%.xml$") then
                        mainXmlUrl = url
                        break
                    end
                end
                
                if mainXmlUrl then
                    async.doAsyncRemoteRequest(mainXmlUrl, raw_get_cache, "HTTPS")
                end
            end
        end
    else
        utilprint("Something went wrong with async in building cache", "error")
    end
end

function raw_get_cache(retval, page, status, headers, full_status, request_url)
    local webName, rawName, webVersion, pluginId, localVersion, localName
    local script_directory = GetInfo(60)
    if status == 200 then
        webName = getName(page, false)
        rawName = string.match(page, '%s+name="([a-zA-Z0-9_]+)"')
        webVersion = string.match(page, '  version="(%d+%.%d+)"')
        pluginId = string.match(page, '%s+id="(%w+)"')
        purpose = string.match(page, '%s+purpose="([^"]+)"')
        localVersion = GetPluginInfo(pluginId, 19)
        localName = script_directory.. rawName.. ".xml"
        
        -- Get all files associated with this plugin from our stored mapping
        local allFiles = {}
        if hpmVar and hpmVar["pluginFiles"] and hpmVar["pluginFiles"][request_url] then
            allFiles = hpmVar["pluginFiles"][request_url]
        else
            -- Fallback: just the main XML file
            allFiles = {request_url}
        end
        
        hpmVar["cache"][pluginId] = {}
    else
        utilprint("Can't connect to GitHub", "error")
        return
    end
    
    cache_res = cache_res + 1
    
    hpmVar["cache"][pluginId] = {
        shortName = webName,
        rawname = rawName,
        webVersion = webVersion,
        pluginId = pluginId,
        localVersion = localVersion,
        localName = localName,
        url = request_url,
        allFiles = allFiles,
        purpose = purpose
    }
end


function updatePluginThis()
     raw = "https://raw.githubusercontent.com/Coffee-Nerd/DarkMUSH/main/worlds/plugins/DarkMUSH_Plugin_Updater.xml"
     async_ok, async = pcall (require, "async")
     if async_ok then
          plugin_page = async.doAsyncRemoteRequest(raw, Raw_Update, "HTTPS")
     else
          utilprint("Error on updating","error")
     end
end

function Raw_Update(retval, page, status, headers, full_status, request_url)
        if status == 200 then
            raw_version = tonumber(string.match(page, '%s%s+version="(%d+%.?%d+)"'))
        end

        if tonumber(raw_version) == tonumber(PLUGIN_VERSION) then
            utilprint("@Y"..PLUGIN_NAME .. "@x238 is up to date!","script")
        elseif tonumber(raw_version) > tonumber(PLUGIN_VERSION) then
            utilprint("Updating from version @R"..PLUGIN_VERSION.."@x238 to @R"..raw_version.."@x238 Please stand by.","script")
            local file = io.open(GetPluginInfo(GetPluginID(), 6), "w")
            file:write(page)
            file:close()
            if "" == GetAlphaOption("script_prefix") then
                SetAlphaOption("script_prefix", "\\\\\\")
            end
            Execute(GetAlphaOption("script_prefix") .. "DoAfterSpecial(1, \"ReloadPlugin('" .. GetPluginID() .. "')\", sendto.script)")
            utilprint("Updating is complete, Have a muddish day!","script")
        elseif tonumber(raw_version) < tonumber(PLUGIN_VERSION) then
          utilprint("Your development is too quick!","error")
        end
        raw_version = nil
    end -- end Update code

function PruHelp()
utilprint("@x238+---------------------@x238[@RDE@x202MO@x208N P@x214LU@x220G@x228IN @x220MA@x214NA@x208G@x202E@RR @WVer @Y"..GetPluginInfo (GetPluginID (), 19).."@x238]------------------+")
utilprint("@x238| @x214pru help                @x110- @x214Displays this helpfile @x238                    |")
utilprint("@x238| @x208pru check               @x110- @x208Checks to see if there is any updates @x238     |")
utilprint("@x238| @x214pru update              @x110- @x214Checks for updates on this script@x238          |")
utilprint("@x238+----------------------------------------------------------------------+")
end

]]>
</script> 

</muclient>
